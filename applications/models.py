from django.db import models
from django.utils.translation import gettext_lazy as _

from projects.models import Project, Question


class Application(models.Model):

    class ApplicationStatus(models.TextChoices):
        SUBMITTED = "SUB", _("Submitted")
        REJECTED_NO_INTERVIEW = "RNI", _("Rejected without interview")
        REJECTED_WITH_INTERVIEW = "RWI", _("Rejected after interview")
        OFFER_SENT =  "OFS", _("Offer sent")
        OFFER_REJECTED = "OFR", _("Offer rejected")
        OFFER_ACCEPTED = "OFA", _("Offer accepted")

    app_status_mapping = {k: v for k, v in ApplicationStatus.choices}

    # primary key auto-generated by project model
    student = models.ForeignKey("students.Student", on_delete=models.CASCADE)
    project = models.ForeignKey(Project, on_delete=models.CASCADE)

    # for ordering applications
    created_at = models.DateTimeField(auto_now_add=True)

    # rank of each applied project
    rank = models.IntegerField(default=0)

    # application status, uses ApplicationStatus enum
    status = models.CharField(max_length=3, choices=ApplicationStatus.choices, default=ApplicationStatus.SUBMITTED)

    @property
    def app_status_choices(self):
        return {k: v for k, v in self.ApplicationStatus.choices}

    def to_dict(self):
        return {
            "student": self.student.id,
            "project": self.project.id,
            "created_at": str(self.created_at),
            "rank": self.rank,
            "status": self.app_status_mapping[self.status],
            "answers": [a.to_dict() for a in Answer.objects.filter(application=self)],
        }

    def __str__(self):
        return self.student.email_address + " application for " + self.project.project_name


class Answer(models.Model):
    student = models.ForeignKey("students.Student", on_delete=models.CASCADE) # PRIMARY KEY
    application = models.ForeignKey(Application, on_delete=models.CASCADE)
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    answer_text = models.CharField(max_length=1000)

    def to_dict(self):
        return {
            "student": self.student.id,
            "application": self.application.id,
            "question": self.question.id,
            "answer_text": self.answer_text,
        }
    
    def __str__(self):
        return self.answer_text
